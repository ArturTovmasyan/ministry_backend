<?php

namespace App\Repository;

use App\Entity\Test;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Doctrine\ORM\Query\Expr;

/**
 * TestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TestRepository extends ServiceEntityRepository
{
    /**
     * QuestionRepository constructor.
     * @param ManagerRegistry $registry
     */
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Test::class);
    }

    /**
     * This function is used to get test bank data for instructor
     *
     * @param null $userId
     * @return array
     */
    public function getTestBankData($userId = null): array
    {
        $queryBuilder = $this->createQueryBuilder('t')
            ->join('t.question', 'q')
            ->join('q.filters', 'f')
            ->join('f.category', 'c')
            ->leftJoin('t.instructor', 'i');

        $customTestBuilder = clone $queryBuilder;
        $userCustomTest = null;

        if ($userId) {
            $userCustomTest = $customTestBuilder
                ->join('t.assignTest', 'at')
                ->join('at.student', 'st')
                ->andWhere('i.id IS NULL AND st.id = :userId')
                ->groupBy('t.id')
                ->orderBy('t.id', 'DESC')
                ->setParameter('userId', $userId)
                ->getQuery()->getResult();
        }

        $data = $queryBuilder
            ->select('t')
            ->andWhere('i.id IS NOT NULL')
            ->groupBy('t.id')
            ->orderBy('t.id', 'DESC')
            ->getQuery()
            ->getResult();

        if ($userCustomTest) {
            $data = array_merge($userCustomTest, $data);
        }

        $testData['count'] = \count($data);
        $testData['data'] = $data;

        return $testData;
    }

    /**
     * This function is used to get test data by ID
     *
     * @param int $testId
     * @param int $schoolId
     * @return array
     */
    public function getTesById($testId, $schoolId = null): array
    {
        $queryBuilder = $this->createQueryBuilder('t');
        $queryBuilder
            ->select('t')
            ->join('t.question', 'q')
            ->join('q.filters', 'f')
            ->join('f.category', 'c')
            ->leftJoin('t.instructor', 'i');

        if ($schoolId) {
            $queryBuilder
                ->join('i.school', 's')
                ->where('s.id = :schoolId')
                ->setParameter('schoolId', $schoolId);
        }

        $queryBuilder
            ->andWhere('t.id = :testId')
            ->groupBy('t.id')
            ->setParameter('testId', $testId);

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * This function is used to get test data by assign test id
     *
     * @param int $assignTestId
     * @return array
     */
    public function getTesByAssignId($assignTestId): array
    {
        $queryBuilder = $this->createQueryBuilder('t');
        $queryBuilder
            ->select('t')
            ->join('t.assignTest', 'at', Expr\Join::WITH, 'at.id = :assignTestId')
            ->join('t.question', 'q')
            ->join('q.answer', 'an')
            ->where('at.id = :assignTestId')
            ->setParameter('assignTestId', $assignTestId);

        return $queryBuilder->getQuery()->getResult();
    }
}
